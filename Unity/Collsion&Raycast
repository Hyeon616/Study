    // Collsion
    // 1) 나 혹은 상대한테 RigidBody가 있어야 한다. (IsKinematic : Off)
    // 2) 나한테 Collider가 있어야 한다. (IsTrigger : Off)
    // 3) 상대한테 Collider가 있어야 한다. (IsTrigger : Off)

    // OnCollisionEnter : 충돌에 대한 Action
    private void OnCollisionEnter(Collision collision)
    {
        Debug.Log($"Collision @ {collision.gameObject.name} !");
    }

    // 둘 다 Collider가 있어야 한다.
    // 둘 중 하나는 IsTrigger : On
    // 둘 중 하나는 RigidBody가 있어야 한다.

    // OnTriggerEnter : 범위 안에 들어가있는지 체크하여 Action
    private void OnTriggerEnter(Collider other)
    {
        Debug.Log($"Trigger @ {other.gameObject.name} !");
    }
    
    ------------------------------------------------------------------------------
    Raycast
    
        // Local <-> World <-> Viewport <-> Screen (화면)
        // 특정 물체를 기준으로 한 좌표 <-> 월드 안에서 공통된 중심 좌표 <-> 2d로 보고있는 화면의 좌표

        // Debug.Log(Input.mousePosition); // Screen => 픽셀 좌표를 기준으로 표시

        // Debug.Log(Camera.main.ScreenToViewportPoint(Input.mousePosition)); // Viewport 화면 비율을 기준으로 표시
        // 응용하여 캐릭터 이동, 장애물이 시점을 막으면 장애물 앞으로 카메라 이동
      
        // Object의 Tag를 이용하여 확인
        GameObject.FindGameObjectWithTag("Monster");
        
        // 마우스 포인터가 가르키는 위치 확인
        if (Input.GetMouseButtonDown(0))
        {
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);

            Debug.DrawRay(Camera.main.transform.position, ray.direction * 100.0f, Color.red, 1.0f);

            // Instance의 Tag를 불러온다
            LayerMask mask= LayerMask.GetMask("Monster") | LayerMask.GetMask("Wall");
            
            // Tag가 저장된 값을 bit flag 연산을 통해 불러온다.
            // Tag는 Int32를 이용한다
            // 768처럼 10진수로 연산된 값을 사용하면 어디서 불러온 숫자인지 알수없으므로 사용을 지양한다.
            // int mask = 768; //(1 << 8) | (1<<9); bit flag

            RaycastHit hit;
            if (Physics.Raycast(ray, out hit, 100.0f, mask))
            {
                
                Debug.Log($"Raycast Camera @ {hit.collider.gameObject.tag}");
            }
            
        }

        // 위의 코드는 Ray로 구현하였지만 아래 코드는 Screen에서 마우스포인터와 메인카메라의 위치의 벡터차를 이용하여 방향벡터(dir)를 구해 구현
        //if (Input.GetMouseButtonDown(0))
        //{
        //    Vector3 mousePos = Camera.main.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, Camera.main.nearClipPlane));
        //    Vector3 dir = mousePos - Camera.main.transform.position;
        //    dir = dir.normalized;

        //    Debug.DrawRay(Camera.main.transform.position, dir * 100.0f, Color.red, 1.0f);

        //    RaycastHit hit;
        //    if (Physics.Raycast(Camera.main.transform.position, dir, out hit, 100.0f))
        //    {
        //        Debug.Log($"Raycast Camera @ {hit.collider.gameObject.name}");
        //    }
        //}
