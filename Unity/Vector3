struct MyVector
{
    public float x;
    public float y;
    public float z;

    // magnitude는 피타고라스의 정리를 이용하여 좌표의 거리를 추출한다.
    // normalized는 방향을 구한다.
    public float magnitude {  get { return Mathf.Sqrt(x * x + y * y + z * z); } }
    public MyVector normalized { get { return new MyVector(x / magnitude, y / magnitude, z / magnitude); } }

    public MyVector(float x, float y, float z) { this.x = x; this.y = y; this.z = z; }

    public static MyVector operator +(MyVector a, MyVector b)
    {
        return new MyVector(a.x + b.x, a.y + b.y, a.z + b.z);
    }
    public static MyVector operator -(MyVector a, MyVector b)
    {
        return new MyVector(a.x - b.x, a.y - b.y, a.z - b.z);
    }

    public static MyVector operator *(MyVector a, float d)
    {
        return new MyVector(a.x * d, a.y * d, a.z * d);
    }



}


public class PlayerController : MonoBehaviour
{
    [SerializeField]
    float _speed = 10.0f;
    

    void Start()
    {
        MyVector to = new MyVector(10.0f, 0.0f, 0.0f);
        MyVector from = new MyVector(5.0f, 0.0f, 0.0f);
        MyVector dir = to - from; // (5.0f, 0.0f, 0.0f);


        dir = dir.normalized; // (1.0f, 0.0f, 0.0f)

        // 원하는 방향으로 _speed 만큼 이동함.
        MyVector newPos = from + dir * _speed;

        // 방향 벡터
            // 1. 거리(크기)    5  magnitude
            // 2. 실제 방향     우측

    }
    
    
        // Local -> World 좌표계 변환
        // transform.TransformDirection

        // World -> Local 좌표계 변환
        // transform.InverseTransformDirection
